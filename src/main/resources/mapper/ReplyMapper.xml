<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.just.dao.ReplyDao">
  <resultMap id="BaseResultMap" type="com.just.bean.Reply">
    <constructor>
      <idArg column="id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="rep_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="stu_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="parent_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="create_time" javaType="java.util.Date" jdbcType="TIMESTAMP" />
      <arg column="update_time" javaType="java.util.Date" jdbcType="TIMESTAMP" />
      <arg column="type" javaType="java.lang.Integer" jdbcType="INTEGER" />
        <arg column="looked" javaType="java.lang.Integer" jdbcType="INTEGER" />
        <arg column="content" javaType="java.lang.String" jdbcType="LONGVARCHAR" />
        <arg column="rep_stu_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
    </constructor>
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.just.bean.Reply">
    <constructor>
      <idArg column="id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="rep_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="stu_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="parent_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="create_time" javaType="java.util.Date" jdbcType="TIMESTAMP" />
      <arg column="update_time" javaType="java.util.Date" jdbcType="TIMESTAMP" />
      <arg column="type" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="content" javaType="java.lang.String" jdbcType="LONGVARCHAR" />
      <arg column="rep_stu_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
    </constructor>
  </resultMap>
    <resultMap id="MyMap" type="com.just.bean.Reply">
        <id column="id" property="id"/>
        <result column="rep_id" property="repId"/>
        <result column="stu_id" property="stuId"/>
        <result column="parent_id" property="parentId"/>
        <result column="create_time" property="createTime"/>
        <result column="update_time" property="updateTime"/>
        <result column="type" property="type"/>
        <result column="content" property="content"/>
        <result column="rep_stu_id" property="repStuId"/>
        <association property="student" javaType="com.just.bean.Student">
            <result column="name" property="name"></result>
            <result column="head" property="head"></result>
        </association>

    </resultMap>
  <sql id="Base_Column_List">
    id, rep_id, stu_id, parent_id, create_time, update_time, type,rep_stu_id
  </sql>
  <sql id="Blob_Column_List">
    content
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from reply
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from reply
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="map">
    insert into reply (id, rep_id, stu_id, 
      parent_id, create_time, update_time, 
      type, content)
    values (#{id,jdbcType=INTEGER}, #{repId,jdbcType=INTEGER}, #{stuId,jdbcType=INTEGER}, 
      #{parentId,jdbcType=INTEGER}, now(), now(),
      #{type,jdbcType=INTEGER}, #{content,jdbcType=LONGVARCHAR})
  </insert>
  <update id="updatLook" parameterType="java.lang.Integer">
    update reply set looked = 1 where rep_stu_id = #{id}
  </update>
  <insert id="insertSelective" parameterType="map">
    insert into reply
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="repId != null">
        rep_id,
      </if>
      <if test="stuId != null">
        stu_id,
      </if>
      <if test="parentId != null">
        parent_id,
      </if>
        create_time,
        update_time,
      <if test="type != null">
        type,
      </if>
      <if test="content != null">
        content,
      </if>
      <if test="repStuId != null">
        rep_stu_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="repId != null">
        #{repId,jdbcType=INTEGER},
      </if>
      <if test="stuId != null">
        #{stuId,jdbcType=INTEGER},
      </if>
      <if test="parentId != null">
        #{parentId,jdbcType=INTEGER},
      </if>
        now(),
      now(),
      <if test="type != null">
        #{type,jdbcType=INTEGER},
      </if>
      <if test="content != null">
        #{content,jdbcType=LONGVARCHAR},
      </if>
      <if test="repStuId != null">
        #{repStuId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.just.bean.Reply">
    update reply
    <set>
      <if test="repId != null">
        rep_id = #{repId,jdbcType=INTEGER},
      </if>
      <if test="stuId != null">
        stu_id = #{stuId,jdbcType=INTEGER},
      </if>
      <if test="parentId != null">
        parent_id = #{parentId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="type != null">
        type = #{type,jdbcType=INTEGER},
      </if>
      <if test="content != null">
        content = #{content,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.just.bean.Reply">
    update reply
    set rep_id = #{repId,jdbcType=INTEGER},
      stu_id = #{stuId,jdbcType=INTEGER},
      parent_id = #{parentId,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      type = #{type,jdbcType=INTEGER},
      content = #{content,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.just.bean.Reply">
    update reply
    set rep_id = #{repId,jdbcType=INTEGER},
      stu_id = #{stuId,jdbcType=INTEGER},
      parent_id = #{parentId,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      type = #{type,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="getListByReplyId" parameterType="map" resultMap="MyMap">
    select * from (select * from reply where rep_id =#{repId} and type=#{type}) m left join student s on m.stu_id = s.id
  </select>
  <select id="getListByNotRead" resultMap="MyMap">
     select * from (select * from reply where looked =0) m  left join student s on m.stu_id = s.id
  </select>
</mapper>